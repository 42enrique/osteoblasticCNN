# -*- coding: utf-8 -*-
"""Osteosarcoma_CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fA_mRPlYxVkgdmGtTPyv1XaWc6GWuIrS
"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import VGG16
from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Input
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from imutils import paths
import matplotlib.pyplot as plt
import numpy as np
import argparse
import cv2
import os
import sys
import tensorflow as tf

from google.colab import drive
drive.mount('/content/drive')

dataset_path = '/content/drive/My Drive/Colab Notebooks/dataset/'
print(dataset_path)

sys.path.append('/content/drive/My Drive/Colab Notebooks/keras-folder')
import train_lib
from train_lib import*

data, labels = train_lib.load_rgb_data(dataset_path, 244, shuffle = True)
print(data.shape)
print(labels.shape)



"""**Visualizing the Data Set**"""

train_lib.plot_sample_from_dataset(data, labels, rows = 4, colums= 12, width = 20, height = 10)

stats = train_lib.get_data_distribution(dataset_path,output_file="/content/drive/My Drive/Colab Notebooks/keras-folder/covid-19_chest_size_stats.csv")

train_lib.plot_dataset_distribution (stats, num_cols =4, width =15, height = 5, histogram_bins =30, histogram_range=[0,800])

"""Data Loading"""

data, labels = train_lib.load_rgb_data(dataset_path,244, shuffle = True)

data = train_lib.normalize_data(data)

print ("labels: ", labels[:5])
lb = LabelBinarizer()
binary_labels = lb.fit_transform(labels)
print("after binalizer: ", binary_labels[:5])
hot_encoded_labels = to_categorical(binary_labels)

(trainX, testX, trainY, testY) = train_test_split(data, hot_encoded_labels, test_size =0.20, stratify = hot_encoded_labels, random_state = 42)

train_lib.plot_sample_from_dataset(trainX, trainY, rows=3, colums =2, width =10, height =10)
display_dataset_shape(trainX, trainY)
display_dataset_shape(testX, testY)

trainAug = ImageDataGenerator(rotation_range= 15, fill_mode="nearest")

#initializew the learning rate, num of epochs to train fo, and batch size 

INIT_LR = 1e-3
EPOCHS = 25
BS = 8

baseModel = VGG16(weights ='imagenet', include_top = False, input_tensor =Input(shape= (224,224,3)))

headModel = baseModel.output
headModel = AveragePooling2D(pool_size = (4,4) )(headModel)
headModel = Flatten(name="flatten")(headModel)
headModel = Dense(64, activation = "relu")(headModel)
headModel = Dropout(0.5)(headModel)
headModel = Dense(2, activation = "softmax")(headModel)

model = Model(inputs = baseModel.input, outputs=headModel)

for layer in baseModel.layers:
  layer.trainable = False

print("[INFO] compiling model...")
opt = Adam(lr =INIT_LR, decay = INIT_LR /EPOCHS)
model.compile(loss= "binary_crossentropy", optimizer = opt, metrics = ["accuracy"])

print("[INFO] training head...")

H = model.fit(
    trainAug.flow(trainX,trainY, batch_size = BS),
    steps_per_epoch = len(trainX) // BS, 
    validation_data=(testX,testY), 
    validation_steps = len(testX) //BS,
    epochs = EPOCHS
)

#save the trained model 

model.save('my_model.h5')

"""# Making Predictions"""

print("[INFO] evaluating network.. ")
model.evaluate(testX, verbose =1)
predIdxs = model.predict(testX, verbose=1)

index = 3
image = testX[index]
train_lib.display_image(testX, testY, index)

image = train_lib.reshape_image_for_neural_network_input(image)

predProb = model.predict(image, verbose = 1)

print("true label: ", testY[index])
print("predicted label: ", predProb)

predProbabilities = model.predict(testX, verbose = 1)
predIdxs = np.argmax(predProbabilities, axis =1)

print(classification_report(testY.argmax(axis=1), predIdxs, target_names = lb.classes_))

cm = confusion_matrix(testY.argmax(axis=1), predIdxs)
total = sum(sum(cm))
acc = (cm[0,0]+cm[1,1]) / total

sensitivity = cm[0,0] / (cm[0,0] + cm[0,1])
specificity = cm[1,1] / (cm[1,0] + cm[1,1])

print(cm)
print(specificity)

train_lib.plot_loss_accuracy(H, "/content/drive/My Drive/Colab Notebooks/keras-folder/plot.jpg")

N = EPOCHS
plt.style.use("ggplot")
plt.figure()
plt.plot(np.arange(0,N),H.history["loss"],label ="train_loss")
plt.plot(np.arange(0,N),H.history["val_loss"],label ="val_loss")
plt.plot(np.arange(0,N),H.history["accuracy"],label ="train_acc")
plt.plot(np.arange(0,N),H.history["val_accuracy"],label ="val_acc")
plt.title("Training Loss and Accuracy on Osteosarcoma Dataset")

plt.xlabel("Epoch Number")
plt.ylabel("Loss/Accuracy")
plt.legend(loc="lower left")
plt.savefig("/content/drive/My Drive/Colab Notebooks/keras-folder/plot.jpg")